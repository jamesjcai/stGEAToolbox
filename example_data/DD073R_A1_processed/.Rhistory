# library
library(igraph)
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.sphere, main="sphere")
plot(network, layout=layout.circle, main="circle")
plot(network, layout=layout.random, main="random")
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
# See the complete list with
# help(layout)
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
install.packages("BiocManager")
library("rhdf5")
install.packages(c("arm", "backports", "broom", "bslib", "cli", "clue", "clustree", "conquer", "cpp11", "crayon", "crosstalk", "deldir", "dendextend", "diffobj", "DT", "fields", "future", "gamlss.data", "gamlss.dist", "generics", "gert", "glmnet", "glue", "goftest", "graphlayouts", "Hmisc", "htmlTable", "igraph", "lmtest", "lubridate", "mclust", "metap", "misc3d", "mvtnorm", "nloptr", "parallelly", "pillar", "pkgload", "plotly", "rbibutils", "RcppArmadillo", "readr", "remotes", "rlang", "rsconnect", "rvcheck", "rvest", "scTenifoldNet", "sessioninfo", "Seurat", "SeuratObject", "shiny", "sitmo", "slam", "snow", "spatstat.core", "spatstat.geom", "systemfonts", "testthat", "tibble", "tidytree", "tinytex", "tzdb", "usethis", "uuid", "viridis", "vroom", "WeightedCluster", "xfun", "yulab.utils"))
install.packages(c("graphlayouts", "slam"))
q()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
devtools::install_github('saezlab/liana')
install.packages(c("backports", "brio", "cpp11", "credentials", "devtools", "digest", "dtplyr", "fs", "glue", "httpuv", "igraph", "irlba", "Matrix", "memoise", "pkgbuild", "pkgload", "pracma", "rbibutils", "Rdpack", "readr", "remotes", "rex", "RSQLite", "sessioninfo", "sn", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "stringi", "testthat", "usethis", "uwot", "vroom", "withr", "xml2"))
exit
q()
library(devtools)
devtools::install_github('saezlab/liana')
devtools::install_github('saezlab/liana')
q()
library(devtools)
devtools::install_github('saezlab/liana')
library(liana)
require(liana)
require(tibble)
require(purrr)
show_resources()
show_methods()
liana_path <- system.file(package = "liana")
testdata <-
readRDS(file.path(liana_path , "testdata", "input", "testdata.rds"))
testdata %>% glimpse()
liana_test <- liana_wrap(testdata)
liana_test %>% glimpse
liana_test %>%
liana_aggregate()
complex_test <- liana_wrap(testdata,
method = c('natmi', 'sca', 'logfc', 'connectome'),
resource = c('CellPhoneDB'))
complex_test %>% liana_aggregate()
liana_test <- liana_wrap(testdata, method = c("logfc"), resource = c('OmniPath'))
liana_test
liana_test <- liana_wrap(testdata,
method = c('cellchat', 'sca'),
resource = 'OmniPath',
cellchat.params =
list(
nboot = 10,
exclude_anns = NULL,
thresh = 1,
assay = "RNA",
.normalize = FALSE,
.do_parallel = FALSE,
.raw_use = TRUE
),
liana_call.params=list(complex_policy = "mean")
)
devtools::install_github("sqjin/CellChat")
devtools::install_github("sqjin/CellChat")
q()
library(devtools)
devtools::install_github("sqjin/CellChat")
q()
library("remotes")
remotes::install_github("PYangLab/Cepo", dependencies = TRUE,
build_vignettes = TRUE)
install.packages("remotes")
remotes::install_github("PYangLab/Cepo", dependencies = TRUE,
build_vignettes = TRUE)
remotes::install_github("PYangLab/Cepo", dependencies = TRUE,
build_vignettes = TRUE)
remotes::install_github("PYangLab/Cepo", dependencies = TRUE,
build_vignettes = TRUE, force=TRUE)
library("Cello")
library("Cepo")
help("Cepo")
library(SingleCellExperiment)
data('cellbench', package = 'Cepo')
cellbench
cellbench$celltype
cellbench
logcounts(cellbench)
cepoOutput <- Cepo(logcounts(cellbench), cellbench$celltype)
cepoOutput
vignette("Cepo")
vignette(Cepo)
vignette
vignette(Cepo)
browseVignettes("Cepo")
ds_res = Cepo(exprsMat = logcounts(cellbench),
cellType = cellbench$celltype)
ds_res
library(UpSetR)
res_name = topGenes(object = ds_res, n = 500)
upset(fromList(res_name), nsets = 3)
plotDensities(x = cellbench,
cepoOutput = ds_res,
nGenes = 2,
assay = "logcounts",
celltypeColumn = "celltype")
plotDensities(x = cellbench,
cepoOutput = ds_res,
genes = c("PLTP", "CPT1C", "MEG3", "SYCE1", "MICOS10P3", "HOXB7"),
assay = "logcounts",
celltypeColumn = "celltype")
exit()
q()
library(scTenifoldNet)
install.packages("scTenifoldNet")
install.packages("scTenifoldKnk")
q()
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("ggsci")
install.packages("viridis")
install.packages("tidyverse")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("PaulingLiu/scibet")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("PaulingLiu/scibet")
suppressMessages(library(ggplot2))
suppressMessages(library(tidyverse))
suppressMessages(library(scibet))
suppressMessages(library(viridis))
suppressMessages(library(ggsci))
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("PaulingLiu/scibet")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("PaulingLiu/ROGUE")
suppressMessages(library(ROGUE))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyverse))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("infercnv")
library(infercnv)
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=tempfile(),
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
install.packages("devtools")
devtools::install_github("CostaLab/MOJITOO", build_vignettes = TRUE)
seurat_combined_sct_umap_renamed.rds
seurat_combined_sct_umap_renamed.rds
seurat_combined_sct_umap_renamed.rds
install.packages("languageserver")
install.packages(c("ape", "brew", "broom", "circlize", "cli", "clipr", "colorspace", "correlation", "crayon", "datawizard", "dbscan", "densityClust", "desc", "doParallel", "dplyr", "DT", "dtplyr", "effectsize", "evaluate", "foreach", "future", "generics", "glue", "insight", "iterators", "jsonlite", "ks", "leidenbase", "locfit", "magrittr", "openssl", "parameters", "pillar", "pracma", "raster", "RCurl", "readr", "reticulate", "rlang", "rmarkdown", "RSQLite", "scattermore", "sf", "Signac", "spatstat.core", "spatstat.geom", "spdep", "speedglm", "statsExpressions", "terra", "testthat", "tidyr", "tidyselect", "tinytex", "units", "VGAM", "withr", "xfun", "XML", "yaml"))
q()
library(devtools)
install_github("navinlabcode/CellTrek")
library(devtools)
install_github("navinlabcode/CellTrek")
library(CellTrek)
options(stringsAsFactors = F)
library("CellTrek")
library("dplyr")
library("Seurat")
library("viridis")
library("ConsensusClusterPlus")
install.packages("ConsensusClusterPlus")
options(stringsAsFactors = F)
library("CellTrek")
library("dplyr")
library("Seurat")
library("viridis")
library("ConsensusClusterPlus")
source("http://www.bioconductor.org/biocLite.R")
deps = c('BiocParallel', 'genefilter', 'DESeq2')
new_deps = deps[!(deps %in% installed.packages()[,"Package"])]
if(length(new_deps) != 0){biocLite(new_deps)}
library('devtools')
devtools::install_github('edsgard/trendsceek')
# install devtools and install
install.packages(pkgs = 'devtools')
devtools::install_github('ZJUFanLab/SpaTalk')
# install devtools and install
install.packages(pkgs = 'devtools')
devtools::install_github('ZJUFanLab/SpaTalk')
devtools::install_github('ZJUFanLab/SpaTalk')
install.packages(pkgs = "NNLM")
install.packages(pkgs = "NNLM")
install.packages("nnlm")
devtools::install_github('linxihui/NNLM')
devtools::install_github('ZJUFanLab/SpaTalk')
library(SpaTalk)
# load starmap data
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_data.rda"))
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_meta.rda"))
# revise gene symbols according to the NCNI gene symbols
starmap_data <- rev_gene(data = as.matrix(starmap_data),
data_type = "count",
species = "Mouse",
geneinfo = geneinfo)
starmap_data
geneinfo
starmap_meta$celltype
starmap_meta
starmap_data
as.matrix(starmap_data)
as.matrix(starmap_data)
install.packages("pcaPP")
install.packages(c("akima", "argparse", "assertive.properties", "babelgene", "BiocManager", "blob", "bookdown", "checkmate", "cli", "datawizard", "densEstBayes", "deSolve", "dplyr", "DT", "fda", "formatR", "future", "future.apply", "geometry", "gert", "gplots", "haven", "Hmisc", "igraph", "insight", "kernlab", "knitr", "ks", "leiden", "leidenbase", "loo", "magrittr", "matrixStats", "msigdbr", "multcomp", "parallelly", "pbmcapply", "performance", "processx", "ps", "randomForestSRC", "readxl", "reshape", "rjags", "rmarkdown", "RSpectra", "RSQLite", "rstan", "Rvcg", "sfsmisc", "sp", "spdep", "statsExpressions", "testthat", "TH.data", "tinytex", "tzdb", "uuid"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BayesSpace")
install.packages("pdist")
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
melanoma <- getRDS(dataset="2018_thrane_melanoma", sample="ST_mel1_rep2")
set.seed(102)
melanoma <- spatialPreprocess(melanoma, platform="ST",
n.PCs=7, n.HVGs=2000, log.normalize=FALSE)
melanoma <- qTune(melanoma, qs=seq(2, 10), platform="ST", d=7)
qPlot(melanoma)
set.seed(149)
melanoma <- spatialCluster(melanoma, q=4, platform="ST", d=7,
init.method="mclust", model="t", gamma=2,
nrep=1000, burn.in=100,
save.chain=TRUE)
clusterPlot(melanoma)
melanoma.enhanced <- spatialEnhance(melanoma, q=4, platform="ST", d=7,
model="t", gamma=2,
jitter_prior=0.3, jitter_scale=3.5,
nrep=1000, burn.in=100,
save.chain=TRUE)
clusterPlot(melanoma.enhanced)
markers <- c("PMEL", "CD2", "CD19", "COL1A1")
melanoma.enhanced <- enhanceFeatures(melanoma.enhanced, melanoma,
feature_names=markers,
nrounds=0)
melanoma
install.packages("hdf5r")
q()
#setwd("C:\\Users\\jcai\\Documents\\GitHub\\spatial_transcriptomics\\external\\R_BayesSpace")
setwd("U:\\GitHub\\spatial_transcriptomics\\example_data\\DD073R_A1_processed")
# setwd("C:\\Users\\jcai\\Documents\\GitHub\\spatial_transcriptomics\\example_data\\DD073R_A1_processed")
colData <- read.csv(file.path("spatial", "tissue_positions_list.csv"), header=FALSE)
colnames(colData) <- c("spot", "in_tissue", "row", "col", "imagerow", "imagecol")
rownames(colData) <- colData$spot
colData <- colData[colData$in_tissue > 0, ]
library(Seurat)
library(Matrix)
library(hdf5r)
counts <- Read10X_h5("filtered_feature_bc_matrix.h5", use.names = TRUE, unique.features = TRUE)
library(SingleCellExperiment)
counts <- counts[, rownames(colData)]
sce <- SingleCellExperiment(assays=list(counts=counts),
rowData=rownames(counts),
colData=colData)
libsizes <- colSums(counts)
size.factors <- libsizes/mean(libsizes)
logcounts(sce) <- log2(t(t(counts)/size.factors) + 1)
library(ggplot2)
library(BayesSpace)
sce <- spatialPreprocess(sce, platform="Visium", n.PCs=7, n.HVGs=2000, log.normalize=FALSE)
sce <- qTune(sce, qs=seq(2, 10), platform="Visium", d=7)
qPlot(sce)
# a <- exampleSCE()
set.seed(149)
sce <- spatialCluster(sce, q=6, platform="Visium", d=7,
init.method="mclust", model="t", gamma=2,
nrep=1000, burn.in=100,
save.chain=TRUE)
head(colData(sce))
clusterPlot(sce)
clusterPlot(sce, palette=c("purple", "red", "blue", "yellow","gray","green"), color="black") +
theme_bw() +
xlab("Column") +
ylab("Row") +
labs(fill="BayesSpace\ncluster", title="Spatial clustering of ST_mel1_rep2")
sce.enhanced <- spatialEnhance(sce, q=6, platform="Visium", d=7,
model="t", gamma=2,
jitter_prior=0.3, jitter_scale=3.5,
nrep=1000, burn.in=100,
save.chain=TRUE)
clusterPlot(sce.enhanced)
s<-sce.enhanced
s
s$colData
s.colData
colData(s)
write.csv(colData(s),'aaaa.csv')
rowData(s)
write.csv(rowData(s),'bbbb.csv')
markers <- c("PMEL", "CD2", "CD19", "COL1A1")
ROR1")
sce.enhanced <- enhanceFeatures(sce.enhanced, sce, feature_names=markers,
nrounds=0)
)
)
}
;
(())
ROR1")
sce.enhanced <- enhanceFeatures(sce.enhanced, sce, feature_names=markers,
nrounds=0)
s<-sce.enhanced
s
s.assays(1)
s$assays(1)
s$assays
s.assays
assays(s)
assays(s)(1)
assays(s).logcounts
logcounts(assays(s))
assays(1)(s)
assays(s)
write.csv(assays(s),'cccc.csv')
